#!/Users/jeffhykin/.rbenv/versions/2.5.5/bin/ruby
require 'atk_toolbox'
require 'digest'

# TODO: add a "strict" install option that installs all of the exact versions of everything, and throws an error if that is impossible

def not_yet_implemented()
    puts "Sorry, this feature is still under development"
end

def help_command()
    puts <<-HEREDOC.remove_indent
        atk #{"--help".green}
            info: shows avalible commands

        atk #{"--version".green}
            info: shows version
        
        atk #{"run".green} #{"<package>".blue}
            info:
                this command is used execute a remote script (normally for setup)
            examples: 
                `atk run python`
                `atk run jeff-hykin/atk-python`
                `atk run https://github.com/jeff-hykin/atk-python`
            
        atk #{"clone".green} #{"<github-url>".blue}
            info:
                command for quickly setting up other people's projects
                it downloads a github repo to the projects folder 
                and runs the project (setup) function
        
        atk #{"install".green} #{"<package>".blue} #{"<version>".blue}
            info:
                this command is used when you want to manually install a package
            examples: 
                `atk install python`
                `atk install jeff-hykin/atk-python`
                `atk install https://github.com/jeff-hykin/atk-python`
        
        atk #{"update".green}
            info: this will get you the latest version of the `atk`, `project`, and `_` commands
        
        atk #{"uninstall-atk".green}
            info: this command will uninstall atk itself
    HEREDOC
end


def ensure_cloned_and_up_to_date(target_dir, git_repo_url)
    # check if it exists
    if FS.directory?(target_dir)
        if Console.verbose
            git_repo = Git.open(target_dir,  :log => Logger.new(STDOUT))
        else
            git_repo = Git.open(target_dir)
        end
    # if it doesn't exist, then clone it
    else
        git_repo = Git.clone(git_repo_url, target_dir)
    end
    # pull from origin master
    # TODO: make this a force pull
    git_repo.pull
end

class PackageInstaller
    attr_accessor :dependencies, :name, :installed_version
    @folder_name = nil
    @installed_version = nil
    @install_command = nil
    @dependencies = {}
    
    @@installations_on_deck = {}
    @@installers_info = YAML.load_file(ATK.paths[:installed_yaml])
    
    def initialize(name)
        # This function update/download the installer for a particular package and adds it's dependencies to all of the relevant locations
    
        @name = PackageInstaller.simplify_name(name)
        # setting the name, effectively also sets self.folder_name
        
        # make sure all of them exist
        @@installers_info["installed"] ||= {}
        @@installers_info["downloaded"] ||= {}
        @@installers_info["dependencies"] ||= {}
        
        # check if installed
        if @@installers_info["installed"][self.folder_name] != nil
            @installed_version = @@installers_info["installed"][self.folder_name]["version"]
        end
        
        # make sure the installer is up to date
        ensure_cloned_and_up_to_date(self.path, self.repo_url())
        
        # Get the installer data from the info.yaml
        self.parse_installer_info()
        
        # Keep track of who depends on what
        @@installers_info["dependencies"] = PackageInstaller.add_to_dependency_listing(self.folder_name, @installed_version, @dependencies)
        
        # now that its been downloaded, save it to the installed packages
        @@installers_info["downloaded"][self.folder_name] = { source: self.repo_url() }
        
        # save any changes
        FS.write(@@installers_info.to_yaml, to: ATK.paths[:installed_yaml])
    end
    
    def folder_name
        if @folder_name == nil
            @folder_name = PackageInstaller.get_folder_name(@name)
        else
            return @folder_name
        end
    end
    
    def run_install_command(version)
        # TODO: check for version-specific dependencies, then add them to the installer.yaml
        @install_command[version]
        # if no errors, then update the installed version
        @@installers_info["installed"][self.folder_name] ||= {}
        @@installers_info["installed"][self.folder_name]["version"] = version
        # save any changes
        FS.write(@@installers_info.to_yaml, to: ATK.paths[:installed_yaml])
    end
    
    def repo_url
        if @repo_url == nil
            @repo_url = PackageInstaller.get_repo_url(@name)
        end
        return @repo_url
    end

    def path
        ATK.paths[:installers_folder]/self.folder_name
    end

    def parse_installer_info
        # for now, this function ensures that in the info.yaml
            # (install_command) exists, and is a string
            # (dependencies) exists, and is a hash
        # TODO: in the future more diverse inputs will be allowed
        installer_info = {}
        begin
            info = YAML.load_file(self.path/"info.yaml")
        rescue
            # TODO: reference documentation in errors so people know what to do about the error
            raise "\n\nWhen loading the '#{@name}' installer\n    the files were downloaded but there wasn't an info.yaml file in the root directory\n    the owner of the '#{@name}' installer needs to add an info.yaml\n    if you are the package owner, look at the official atk installers on github to see examples of the info.yaml"
        end
        if info["(installer)"] == nil
            raise "\n\nWhen loading the '#{@name}' installer\n    there was an info.yaml file in the root directory\n    however, there was no (installer) key inside the yaml file\n    meaning I don't know what to do with the package\n    the owner of the '#{@name}' installer needs to add an info.yaml\n    if you are the package owner, look at the official atk installers\n    you can find them on github to see examples of the info.yaml"
        end
        Info.parse_advanced_setup(info["(installer)"], installer_info)
        log "installer_info is:"
        log installer_info.to_yaml
        
        # 
        # verify the dependencies
        # 
        # if nil, then convert to an empty hash
        if installer_info["(dependencies)"] == nil
            @dependencies = {}
        # if not nil make sure its a hash
        elsif not installer_info["(dependencies)"].is_a?(Hash)
            raise "\n\nWhen loading the '#{@name}' installer\n    there was an info.yaml file in the root directory\n    however, the (dependencies) wasn't a hash/dict\n    meaning I don't know what to do with it\n    the owner of the '#{@name}' installer needs to add an info.yaml\n    if you are the package owner, look at the official atk installers\n    you can find them on github to see examples of the info.yaml"
        else
            @dependencies = installer_info["(dependencies)"]        
        end
        
        # verify the (install_command)
        if (not installer_info["(commands)"].is_a?(Hash)) || (not installer_info["(commands)"]["(run)"].is_a?(String))
            raise <<-HEREDOC.remove_indent
                
                
                When loading the '#{@name}' installer
                ✔️ there was an info.yaml file in the root directory
                however when looking inside the info.yaml for
                    (commands):
                        (run): "should-be-a-command"
                I didn't find a run command that was a string.
                Because of that, I don't know what/how to run that package
            HEREDOC
        else
            run_command = installer_info["(commands)"]["(run)"]
        end
        # create the runnable lambda
        @install_command = ->(version) do
            FS.in_dir(self.path) do 
                # run the install command
                -"#{run_command} #{version}"
            end
        end
    end
    
    def self.[](installer_name)
        folder_name = PackageInstaller.get_folder_name(installer_name)
        return @@installers_info["installed"][self.folder_name]
    end
    
    def self.get_folder_name(source)
        source = PackageInstaller.simplify_name(source)
        # if its a core or approved package
        if PackageInstaller.is_core_repo?(source)
            # the name is just the source
            return source
        # if its a url
        else
            # use an MD5 hash of the url as the name
            return Digest::MD5.hexdigest(PackageInstaller.get_repo_url(source))
        end
    end
    
    def self.simplify_name(source)
        source = source.strip
        # if its starts with "atk/", just remove that part
        source = source.sub( /^atk\//, "" )
        # if it starts with "https://github.com/", just remove that part
        source = source.sub( /^https:\/\/github.com\//, "" )
        return source
    end
    
    def self.is_core_repo?(source)
        source = PackageInstaller.simplify_name(source)
        # if the package name does not have a slash in it, then assume it is a core / approved installer
        if not (source =~ /.*\/.*/)
            return true
        else
            return false
        end
    end
    
    def self.get_repo_url(installer_name)
        # if its starts with "atk/", just remove that part
        installer_name = PackageInstaller.simplify_name(installer_name)
        # if the package name does not have a slash in it, then assume it is a core / approved installer
        if PackageInstaller.is_core_repo?(installer_name)
            path_to_core_listing = ATK.paths[:core_yaml]
            core = YAML.load_file(path_to_core_listing)
            if core[installer_name] == nil
                puts "I don't see that package in the core, let me make sure I have the latest info"
                download("https://raw.githubusercontent.com/aggie-tool-kit/atk/master/interface/core.yaml", as: path_to_core_listing)
                core = YAML.load_file(path_to_core_listing)
            end
            if core[installer_name] != nil
                repo_url = core[installer_name]["source"]
            else
                raise "That package doesn't seem to be a core package"
            end
        # if it does have a slash, then assume its a github repo
        else
            repo_url = "https://github.com/"+installer_name
        end
    end
    
    def self.add_to_dependency_listing(package_name, package_version, dependency_hash)
        current_dependencies = @@installers_info["dependencies"].dup
        # add all the dependencies
        for each_name, each_version in dependency_hash
            # create if doesn't exist
            current_dependencies[each_name] ||= {}
            current_dependencies[each_name]["dependents"] ||= {}
            current_dependencies[each_name]["dependents"][each_version] ||= []
            # add this package as a dependent
            current_dependencies[each_name]["dependents"][each_version].push({ package_name => package_version })
            # remove duplicates
            current_dependencies[each_name]["dependents"][each_version].uniq!
        end
        return current_dependencies
    end
    
    def self.dependents_of(package_name)
        @@installers_info["dependencies"][package_name]
    end
    
    def self.is_downloaded?(installer_name)
        @@installers_info["downloaded"][installer_name] != nil
    end
    
    def self.install(package_name, version_needed, top_level:true)
        # if this is the first call in a series of recursions, reset the on_deck
        if top_level
            @@installations_on_deck = {}
        end
        # check for screwed up looping of dependencies
        if @@installations_on_deck[package_name] != nil
            raise <<-HEREDOC.remove_indent
            
            
                One of the dependencies (or sub-dependencies) of '#{package_name}', is '#{package_name}'
                    ...So to install '#{package_name}' you have to already have '#{package_name}' installed
                    obviously this doesn't make a ton of sense and its not clear who messed up :/
                    the topmost package needed the #{$on_deck[package_name]} version
                    the deeper package needed the #{version_needed} version
            HEREDOC
        end
        # add the current package, since it is in the process of installation
        @@installations_on_deck[package_name] = version_needed
        # update/download the installer
        installer = PackageInstaller.new(package_name)
        # 
        # check for version mismatches
        # 
        if installer.installed_version == nil
            need_to_install = true
        else
            case Version.new(version_needed) <=> Version.new(installer.installed_version)
            # if already installed
            when 0
                need_to_install = false
            # if current version is newer
            when 1
                # TODO: this behavior should become smarter in the future, some kind of warning or question
                need_to_install = false
            # if current version is older
            when -1
                # TODO: this behavior should become smarter in the future, a confirmation or some other kind of improvement
                # TODO: in the future, run the uninstall if avalible
                need_to_install = true
            end
        end
        
        if need_to_install
            # recursively install all of the dependencies first
            for each_installer_name, each_package_version in installer.dependencies
                PackageInstaller.install(each_installer_name, each_package_version, top_level:false)
            end
            
            # then run the installation
            installer.run_install_command(version_needed)
        end
        
        # remove the current package from on_deck since it has finished installing
        @@installations_on_deck.delete(package_name)
    end
end

if Console.args.length == 0
    puts "This is the ATK command! I'm glad to see you're using it.\nRunning it with no arguments will just get you this message :)"
# if one argument, then act like grep
else
    case Console.args[0]
        when '-v', '--version'
            puts "0.0.1"
        when '--help'
            help_command()
        when '--version'
            # returns the version of the atk gem
            # get all installed gems, filter for just atk
            atk_gems = `gem list`.split("\n").select{|each| each.match(/atk_toolbox \(/) }[0]
            # find all the versions of atk
            versions = atk_gems.sub(/^atk_toolbox \((.*)\)/,'\1')
            # sort them in order
            versions = versions.split(",").map{|each| Version.new(each.strip) }.sort
            # return the most up to date version
            puts versions[-1]
        when 'update'
            if Console.args[1] == nil
                if OS.is?('mac')
                    -'eval `curl -L git.io/fj7gv`'
                elsif OS.is?('linux')
                    -'eval `wget -qO- git.io/fj7gk`'
                else
                    -'powershell -command "Set-ExecutionPolicy RemoteSigned -scope CurrentUser; iex (new-object net.webclient).downloadstring(\'https://git.io/fj7gT\')" & RefreshEnv.cmd'
                end
            end
        when 'run'
            installer_name = Console.args[1]
            # TODO: split up the package name from the version
            version = nil
            
            # check for an internet connection
            if not online?()
                puts "\n\nIt seems like you're not online at the moment so I can't install anything"
                return
            end
            
            # recursively install packages
            PackageInstaller.install(installer_name, version)
            
        when 'clone'
            repo_url = Console.args[1]
            project_folder = ATK.info["project_folder"]
            # if there's a project folder
            if not project_folder
                # then use the Desktop folder
                project_folder = HOME/"Desktop"
            end
            project_name = Console.ask("What do you want to name the project?")
            project_path = project_folder/project_name
            ensure_cloned_and_up_to_date(project_path, repo_url)
            FS.in_dir(project_path) do
                setup_command = Info.project_commands['(setup)']
                if setup_command.is_a?(String)
                    puts "\n\nRunning (setup) command:\n".green
                    sleep 1
                    system setup_command
                end
            end
            
        when 'uninstall'
            # check to see if the package is installed, and check if it has an uninstaller
            not_yet_implemented()
        when 'uninstall-atk'
            # remove the 3 commands and the home folder
            if Console.yes?("Are you sure you want to uninstall ATK?\nnote: packages/languages install via ATK will still be avalible after ATK is removed")
                puts "Deleting the _ command"
                FS.delete(FS.path_for('_'))
                puts "Deleting the project command"
                FS.delete(FS.path_for('project'))
                puts "Deleting the atk command"
                FS.delete(FS.path_for('atk'))
                puts "Deleting the atk directory"
                FS.delete(ATK.paths[:atk])
                puts "Uninstalling the atk_toolbox ruby gem"
                system 'gem uninstall atk_toolbox'
                puts "\n Uninstall complete"
            end
        when 'new'
            not_yet_implemented()
            case Console.args[1]
                when 'project'
                    # create a folder with an info.yaml
                    # ask the user what structure's they would like to integrate
                when 'package'
                    # ask the user what kind of package, installer or structure
                when 'installer'
                    # ask the user what they did to install it
                        # just commands
                        # programming logic
                        # manual setup
                    # repeat for each OS
                when 'structure'
                    # TODO: this is a future feature
                    # structures will can have a
                        # verifier (make sure the structe alread exists)
                        # implementer (make the structure exist if it doesnt)
            end
        else
            puts "I don't recognized that command\nhere's the `atk --help` which might get you what you're looking for:"
            help_command()
    end
    
end
